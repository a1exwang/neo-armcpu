regfile is always written when addr != 0 on posedge, regardless of stall
branch flag and set_stall should be set by combinational logic

stall: the state of whole system should be identical to that where time during
stall set is "removed"; change at negedge

regfile is written by stage_mem at negedge

branch: branch_dest_id2ex: highest bit indicate whether to jump to this
address(0), or reg2_data(1)

access to cp0 registers and interrupt handling occur at mem stage

exc_epc_id2ex is always set regardless of whether exception actually happens;
so in later stages corrent epc could be retrieved

int_req updated on posedge, and int_ack on negedge

in stage ex, mem_addr and alu_result all come from alu_result
mem_data come from alu opr2


POSSIBLE BUG
================
if access of $ra happens in the delay slot of jal, armcpu would use new value
of $ra
for interrupts not set in IM but happens, shoud IP be set?


CP0 registers
===============

usermode:
Status.KSU = 10
and
Status.EXL = 0

kernelmode:
Status.KSU = 00
or
Status.EXL = 1

CP0[0]: Index
P: prob failure (no need to implement)
[3:0] Index

CP0[2:3]: EntryLo0, EntryLo1
[29:6]	PFN
[2]		D	1 if page writable; TLB Modified exception
[1]		V	1 if page valid; TLB Invalid exception

CP0[8]: BadVAddr
cause of:
	Address error (AdEL, AdES)
	TLB Refil
	TLB Invalid (TLBL, TLBS)
	TLB Modified

CP0[9]: Count

CP0[10]: EntryHi
[31:13]	VPN2

CP0[11]: Compare

CP0[12]: Status
[15:8]	IM[7:0]	interrupt mask
[4:3]	KSU		
[1]		EXL		exception level (set when exception and in kernel mode)
[0]		IE		interrupt enable (1 = enable)

CP0[13]: Cause
[15:8]	IP[7:0]	correspond to Satus.IM
[6:2]	ExcCode

CP0[14]: EPC
take care for exception in delay slot

CP0[15]: EBase
[31]	1
[30]	0
[29:12]	Exception Base



implemented instructions:
=========================

addu
subu
xor
slt

addiu
ori
lui

beq
bne
bgez
bgtz

j
jr
jal
jalr

lw
sw
lb
lbu
sb

syscall
eret


virtual address mapping
===============================
# addr						name	permission	physical address
[0x00000000, 0x7FFFFFFF]	kuseg	user/kernel	MMU
[0x80000000, 0x9FFFFFFF]	kseg0	kernel		[0x00000000, 0x1FFFFFFF]
[0xA0000000, 0xBFFFFFFF]	kseg1	kernel		[0x00000000, 0x1FFFFFFF]
[0xC0000000, 0xFFFFFFFF]	kseg2	kernel		MMU


physical address mapping
===============================
[0x00000000, 0x007FFFFF]	RAM		8MB
[0x10000000, 0x10000FFF]	ROM		4KB
[0x1E000000, 0x1EFFFFFF]	flash	16MB, but only lower half word is used
0x1FD003F8					com data
0x1FD003FC					com stat
0x1FD00400					segment display monitor



interrupt
=============
timer	7
ps/2	6
serial	4


TLB
================
VPN2	[62:44]
PFN1	[43:24]
D1		[23]
V1		[22]
PFN0	[21:2]
D0		[1]
V0		[0]
